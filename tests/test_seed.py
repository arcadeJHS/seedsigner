import time
from seedsigner.models.seed import Seed

from seedsigner.models.settings import SettingsConstants
from seedsigner.models.threads import ThreadsafeCounter
from seedsigner.views.seed_views import SeedAddressVerificationView
from base import BaseTest



def test_seed():
	seed = Seed(mnemonic="obscure bone gas open exotic abuse virus bunker shuffle nasty ship dash".split())
	
	assert seed.seed_bytes == b'q\xb3\xd1i\x0c\x9b\x9b\xdf\xa7\xd9\xd97H\xa8,\xa7\xd9>\xeck\xc2\xf5ND?, \x88-\x07\x9aa\xc5\xee\xb7\xbf\xc4x\xd6\x07 X\xb6}?M\xaa\x05\xa6\xa7(>\xbf\x03\xb0\x9d\xef\xed":\xdf\x88w7'
	
	assert seed.mnemonic_str == "obscure bone gas open exotic abuse virus bunker shuffle nasty ship dash"
	
	assert seed.passphrase == ""
	
	# TODO: Not yet supported in new implementation
	# seed.set_wordlist_language_code("es")
	
	# assert seed.mnemonic_str == "natural ayuda futuro nivel espejo abuelo vago bien repetir moreno relevo conga"
	
	# seed.set_wordlist_language_code(SettingsConstants.WORDLIST_LANGUAGE__ENGLISH)
	
	# seed.mnemonic_str = "height demise useless trap grow lion found off key clown transfer enroll"
	
	# assert seed.mnemonic_str == "height demise useless trap grow lion found off key clown transfer enroll"
	
	# # TODO: Not yet supported in new implementation
	# seed.set_wordlist_language_code("es")
	
	# assert seed.mnemonic_str == "hebilla criÃÅa truco tigre gris llenar folio negocio laico casa tieso eludir"
	
	# seed.set_passphrase("test")
	
	# assert seed.seed_bytes == b'\xdd\r\xcb\x0b V\xb4@\xee+\x01`\xabem\xc1B\xfd\x8fba0\xab;[\xab\xc9\xf9\xba[F\x0c5,\x7fd8\xebI\x90"\xb8\x86C\x821\x01\xdb\xbe\xf3\xbc\x1cBH"%\x18\xc2{\x04\x08a]\xa5'
	
	# assert seed.passphrase == "test"



class TestBruteForceAddressVerificationThread(BaseTest):
    def test_brute_force_single_sig(self):
        """
        Ensure that the child thread that does the brute force address verification finds
        the expected result.
        """
        seed = Seed(mnemonic="able ignore obey define rely seminar icon employ polar alert scatter celery".split())

        # Test data generated by bitcoiner.guide/seed
        test_vectors = [
            (SettingsConstants.MAINNET, SettingsConstants.NATIVE_SEGWIT, "m/84'/0'/0'", "bc1qy3y3zq7rclp9fwds2z95w9ru3r5pkyfhchcqgq", 21),  # mainnet native segwit
            (SettingsConstants.MAINNET, SettingsConstants.NESTED_SEGWIT, "m/49'/0'/0'", "38xbzbJ7JsGrcNGDJR1oNwNJNZQMmNF4vB", 32),          # mainnet nested segwit
            (SettingsConstants.MAINNET, SettingsConstants.LEGACY_P2PKH,  "m/44'/0'/0'", "1Pt2GokSwoMG1sUUdUeW135q1uRgt5Ng87", 19),          # mainnet bip44 legacy
            # (SettingsConstants.MAINNET, SettingsConstants.LEGACY_P2PKH,  "m/0'/0'",     "19DbTnhCyzEwhJofFcMCwKV2RbYzLE47ir", 25),          # mainnet bip32 legacy; TODO: not yet supported

            (SettingsConstants.TESTNET, SettingsConstants.NATIVE_SEGWIT, "m/84'/1'/0'", "tb1qgkmy3v0yawv388jjkfhdt3cpu4f89he8f8ep80", 11),  # testnet native segwit
            (SettingsConstants.TESTNET, SettingsConstants.NESTED_SEGWIT, "m/49'/1'/0'", "2NB7mZTeSZBqfCUYZotD3QQ7ukYrxDwtUwF", 22),         # testnet nested segwit
            (SettingsConstants.TESTNET, SettingsConstants.LEGACY_P2PKH,  "m/44'/1'/0'", "mikW7wqmzX29PXrpFUtzy2xp5m8Lf6KH5d",   9),         # testnet bip44 legacy
            # (SettingsConstants.TESTNET, SettingsConstants.LEGACY_P2PKH,  "m/0'/0'",     "mxoiomR4GAJ6yDKXgWYTXuxSnvnJsrfNKv",  17),         # testnet bip32 legacy; TODO: not yet supported

            (SettingsConstants.REGTEST, SettingsConstants.NATIVE_SEGWIT, "m/84'/1'/0'", "bcrt1qunq9557lvzs4tg4nz2m5x6ya8yep7rwlnu3hh0", 18),  # regtest native segwit
            (SettingsConstants.REGTEST, SettingsConstants.NESTED_SEGWIT, "m/49'/1'/0'", "2Mv7o4i1eVc31czz5kg83czDUxhb4eooT2p", 15),           # regtest nested segwit
            (SettingsConstants.REGTEST, SettingsConstants.LEGACY_P2PKH,  "m/44'/1'/0'", "mtu67rA3a3w9TdEbDAVG3nfg93H6zWMFCH",  18),           # regtest bip44 legacy
            # (SettingsConstants.REGTEST, SettingsConstants.LEGACY_P2PKH,  "m/0'/0'",     "mv8ZMK8BcNFmB7RK2PERcv56p5DaeVpsm1",  12),           # regtest bip32 legacy (same addrs as testnet); TODO: not yet supported
        ]

        for network, script_type, derivation_path, target_addr, expected_index in test_vectors:
            cur_addr_index = ThreadsafeCounter()
            verified_index = ThreadsafeCounter()
            verified_index_is_change = ThreadsafeCounter()

            brute_force_thread = SeedAddressVerificationView.BruteForceAddressVerificationThread(
                address=target_addr,
                seed=seed,
                descriptor=None,
                script_type=script_type,
                network=network,
                derivation_path=derivation_path,
                cur_addr_index=cur_addr_index,
                verified_index=verified_index,
                verified_index_is_change=verified_index_is_change
            )
            brute_force_thread.start()

            while True:
                time.sleep(0.01)
                assert cur_addr_index.cur_count <= expected_index
                if cur_addr_index.cur_count == expected_index:
                    break

            # Block current test until child thread completes
            brute_force_thread.join()

            assert verified_index.cur_count == expected_index
            assert verified_index_is_change.cur_count is 0
